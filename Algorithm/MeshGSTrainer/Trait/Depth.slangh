#include "ITrait.slangh"

namespace MeshGSTrain
{
#define FLOATS_PER_SPLAT_ATTRIB 0
#define FLOATS_PER_SPLAT_CHANNEL 1
    public struct Trait : ITrait
    {
        public struct SplatAttrib : ISplatAttrib
        {
            public float getWord(uint idx) { return 0; }
            [mutating]
            public void setWord(uint idx, float value) {}
            [mutating]
            public void regularize() {}
        };
        public struct SplatChannel : ISplatChannel
        {
            public float depth;

            public float getWord(uint idx) { return depth; }
            [mutating]
            public void setWord(uint idx, float value) { depth = value; }
        };

        public struct MeshRTTexture : IMeshRTTexture<SplatChannel>
        {
            Texture2D<float> depths;

            public SplatChannel load(uint2 coord, out float o_T)
            {
                float depth = depths[coord];
                SplatChannel ch;
                ch.depth = depth;
                o_T = float(ch.depth == 0.0);
                return ch;
            }
        };

        public struct MeshRTOut : IMeshRTOut<SplatChannel>
        {
            public float4 depth : SV_Target0;

            public static MeshRTOut create(SplatChannel channel)
            {
                MeshRTOut o;
                o.depth = float4(float3(channel.depth), 1);
                return o;
            }
        };

        [Differentiable]
        public static float viewZ2Depth(float viewZ, no_diff float camNearZ, no_diff float camFarZ)
        {
            viewZ = -viewZ; // make viewZ positive
            return camNearZ / viewZ + 0.02;
        }

        [Differentiable]
        public static SplatChannel getSplatChannel(
            SplatGeom splatGeom,
            SplatAttrib splatAttrib,
            SplatViewGeom splatViewGeom,
            float3 splatViewPos,
            float3 splatClipPos,
            float2x3 splatCov3d,
            float3 splatCov2d,
            no_diff float4x4 camViewMat,
            no_diff float4x4 camProjMat,
            no_diff float camNearZ,
            no_diff float camFarZ
        )
        {
            SplatChannel channel;
            channel.depth = viewZ2Depth(splatViewPos.z, camNearZ, camFarZ);
            return channel;
        }

        [Differentiable]
        public static float loss(SplatChannel predict, float predictT, no_diff SplatChannel data, no_diff float dataT)
        {
            float d = data.depth - predict.depth;
            return d * d;
        }

        public static bool prune(SplatGeom splatGeom, SplatAttrib splatAttrib)
        {
            if (any(abs(splatGeom.scale) < 1e-4) || all(abs(splatGeom.scale) < 1e-3))
                return true;
            return false;
        }
    }
}
