#include "ITrait.slangh"

namespace MeshGSTrain
{
#define FLOATS_PER_SPLAT_ATTRIB 3
#define FLOATS_PER_SPLAT_CHANNEL 4
    public struct Trait : ITrait
    {
        public struct SplatAttrib : ISplatAttrib
        {
            public float3 albedo;

            public float getWord(uint idx) { return albedo[idx]; }
            [mutating]
            public void setWord(uint idx, float value) { albedo[idx] = value; }
            [mutating]
            public void regularize() { albedo = max(albedo, float3(0)); }
        };
        public struct SplatChannel : ISplatChannel
        {
            public float3 albedo;
            public float depth;

            public float getWord(uint idx)
            {
                if (idx < 3)
                    return albedo[idx];
                else
                    return depth;
            }
            [mutating]
            public void setWord(uint idx, float value)
            {
                if (idx < 3)
                    albedo[idx] = value;
                else
                    depth = value;
            }
        };

        public struct MeshRTTexture : IMeshRTTexture<SplatChannel>
        {
            Texture2D<float4> albedos_depths;

            public SplatChannel load(uint2 coord, out float o_T)
            {
                float4 albedo_depth = albedos_depths[coord];
                SplatChannel ch;
                ch.albedo = albedo_depth.xyz;
                ch.depth = albedo_depth.w;
                o_T = float(ch.depth == 0.0);
                return ch;
            }
        };

        public struct MeshRTOut : IMeshRTOut<SplatChannel>
        {
            public float4 albedo_depth : SV_Target0;

            public static MeshRTOut create(SplatChannel channel)
            {
                MeshRTOut o;
                o.albedo_depth = float4(channel.albedo, channel.depth);
                return o;
            }
        };

        [Differentiable]
        public static float viewZ2Depth(float viewZ, no_diff float camNearZ, no_diff float camFarZ)
        {
            viewZ = -viewZ; // make viewZ positive
            return camNearZ / viewZ;
        }

        [Differentiable]
        public static SplatChannel getSplatChannel(
            SplatGeom splatGeom,
            SplatAttrib splatAttrib,
            SplatViewGeom splatViewGeom,
            float3 splatViewPos,
            float3 splatClipPos,
            float2x3 splatCov3d,
            float3 splatCov2d,
            no_diff float4x4 camViewMat,
            no_diff float4x4 camProjMat,
            no_diff float camNearZ,
            no_diff float camFarZ
        )
        {
            SplatChannel channel;
            channel.depth = viewZ2Depth(splatViewPos.z, camNearZ, camFarZ);
            channel.albedo = splatAttrib.albedo;
            return channel;
        }

        [Differentiable]
        static T pow2<T : IFloat>(T x) { return x * x; }

        [Differentiable]
        public static float loss(SplatChannel predict, float predictT, no_diff SplatChannel data, no_diff float dataT)
        {
            float dDepth = data.depth - predict.depth;
            float3 dAlbedo = data.albedo - predict.albedo;
            float dT = dataT - predictT;
            float lDepth = dDepth * dDepth;
            lDepth *= 3.0;
            float lAlbedo = dAlbedo.x * dAlbedo.x + dAlbedo.y * dAlbedo.y + dAlbedo.z * dAlbedo.z;
            lAlbedo *= 1.0;
            float lT = dT * dT;
            float lUncover = pow2(max(-dT, 0)) + pow2(max(dDepth, 0));
            return lDepth + lAlbedo + lT + lUncover;
        }

        public static bool prune(SplatGeom splatGeom, SplatAttrib splatAttrib)
        {
            if (any(abs(splatGeom.scale) < 1e-4))
                return true;
            if (all(splatAttrib.albedo < 1.0 / 255.0))
                return true;
            return false;
        }
    }
}
