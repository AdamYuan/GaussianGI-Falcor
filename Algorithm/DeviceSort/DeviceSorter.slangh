#pragma once

#include "DeviceSorterSizes.slangh"

#ifndef SORT_PAIRS
#define SORT_PAIRS 1
#endif

#ifndef SORT_INDIRECT
#define SORT_INDIRECT 1
#endif

#ifndef LANES_PER_WAVE
#define LANES_PER_WAVE 32
#endif

#if LANES_PER_WAVE < 16
#error WaveGetLaneCount() < 16 not supported
#endif

#ifndef PASS_COUNT
#define PASS_COUNT 4
#endif

// Key
typedef uint SortKey;
typedef uint SortPayload;

#if SORT_INDIRECT == 1
static uint gKeyCount;
uniform uint gKeyCountBufferIndex;
StructuredBuffer<uint> gKeyCountBuffer;
#else
uniform uint gKeyCount;
#endif

T divCeil<T : __BuiltinIntegerType>(T x, T y)
{
    return (x + y - T(1)) / y;
}

uint getSortPartCount()
{
    return divCeil(gKeyCount, SORT_PART_SIZE);
}

uint getGlobalHistPartCount()
{
    return divCeil(gKeyCount, GLOBAL_HIST_PART_SIZE);
}

void prepare()
{
#if SORT_INDIRECT == 1
    gKeyCount = gKeyCountBuffer[gKeyCountBufferIndex];
#endif
}

uint extractKeyRadix(SortKey key, uint radixShift)
{
    return uint((key >> radixShift) & (RADIX - 1));
}

#if LANES_PER_WAVE == 32
typedef uint WaveMask;
#elif LANES_PER_WAVE == 64
typedef uint2 WaveMask;
#elif LANES_PER_WAVE == 128
typedef uint4 WaveMask;
#else
#error Unsupported LANES_PER_WAVE
#endif

// toWaveMask: convert WaveActiveBallot result to a WaveMask
WaveMask toWaveMask(uint4 generalWaveMask)
{
#if LANES_PER_WAVE == 32
    return generalWaveMask.x;
#elif LANES_PER_WAVE == 64
    return generalWaveMask.xy;
#elif LANES_PER_WAVE == 128
    return generalWaveMask;
#endif
}

// same as gl_SubgroupLtMask, all bits with index <= waveLaneIdx are set to 1
WaveMask getWaveLtMask(uint waveLaneIdx)
{
    // https://github.com/KhronosGroup/SPIRV-Cross/blob/main/tests-other/hlsl_wave_mask.cpp
    uint4 waveLtMask = (1 << (waveLaneIdx - uint4(0, 32, 64, 96))) - 1;
    if (waveLaneIdx >= 32)
        waveLtMask.x = -1;
    if (waveLaneIdx >= 64)
        waveLtMask.y = -1;
    if (waveLaneIdx >= 96)
        waveLtMask.z = -1;
    if (waveLaneIdx < 32)
        waveLtMask.y = 0u;
    if (waveLaneIdx < 64)
        waveLtMask.z = 0u;
    if (waveLaneIdx < 96)
        waveLtMask.w = 0u;
    return toWaveMask(waveLtMask);
}

// waveMaskLSB: waveMask must not be all zero
uint waveMaskLSB(uint waveMask)
{
    return firstbitlow(waveMask);
}
uint waveMaskLSB(uint2 waveMask)
{
    return bool(waveMask.x) ? waveMaskLSB(waveMask.x) : 32 + waveMaskLSB(waveMask.y);
}
uint waveMaskLSB(uint4 waveMask)
{
    return all(bool2(waveMask.xy)) ? waveMaskLSB(waveMask.xy) : 64 + waveMaskLSB(waveMask.zw);
}

// waveMaskCountBits: count active bits in waveMask
uint waveMaskCountBits(uint waveMask)
{
    return countbits(waveMask);
}
uint waveMaskCountBits(uint2 waveMask)
{
    return waveMaskCountBits(waveMask.x) + waveMaskCountBits(waveMask.y);
}
uint waveMaskCountBits(uint4 waveMask)
{
    return waveMaskCountBits(waveMask.xy) + waveMaskCountBits(waveMask.zw);
}

// Decoupled look-back flags
#define FLAG_NOT_READY 0 // Flag value inidicating neither inclusive sum, nor reduction of a partition tile is ready
#define FLAG_REDUCTION 1 // Flag value indicating reduction of a partition tile is ready
#define FLAG_INCLUSIVE 2 // Flag value indicating inclusive sum of a partition tile is ready
#define FLAG_MASK 3      // Mask used to retrieve flag values
