#pragma once

public namespace Icosahedron
{
#define ICOSAHEDRON_X .525731112119133606
#define ICOSAHEDRON_Z .850650808352039932

#define ICOSAHEDRON_FACE_DIST .794654472291766
    // python (ICOSAHEDRON_Z**2) / ((ICOSAHEDRON_Z**2) + (ICOSAHEDRON_Z - ICOSAHEDRON_X)**2)**0.5

#define ICOSAHEDRON_VERTEX_COUNT 12
    public static const float3[ICOSAHEDRON_VERTEX_COUNT] kVertices = {
        float3(-ICOSAHEDRON_X, 0, ICOSAHEDRON_Z),
        float3(ICOSAHEDRON_X, 0, ICOSAHEDRON_Z),
        float3(-ICOSAHEDRON_X, 0, -ICOSAHEDRON_Z),
        float3(ICOSAHEDRON_X, 0, -ICOSAHEDRON_Z),
        float3(0, ICOSAHEDRON_Z, ICOSAHEDRON_X),
        float3(0, ICOSAHEDRON_Z, -ICOSAHEDRON_X),
        float3(0, -ICOSAHEDRON_Z, ICOSAHEDRON_X),
        float3(0, -ICOSAHEDRON_Z, -ICOSAHEDRON_X),
        float3(ICOSAHEDRON_Z, ICOSAHEDRON_X, 0),
        float3(-ICOSAHEDRON_Z, ICOSAHEDRON_X, 0),
        float3(ICOSAHEDRON_Z, -ICOSAHEDRON_X, 0),
        float3(-ICOSAHEDRON_Z, -ICOSAHEDRON_X, 0)
    };

#define ICOSAHEDRON_TRIANGLE_COUNT 20
    public static const uint3[ICOSAHEDRON_TRIANGLE_COUNT] kTriangles = {
        uint3(0, 4, 1), uint3(0, 9, 4),  uint3(9, 5, 4),  uint3(4, 5, 8),  uint3(4, 8, 1),  uint3(8, 10, 1), uint3(8, 3, 10),
        uint3(5, 3, 8), uint3(5, 2, 3),  uint3(2, 7, 3),  uint3(7, 10, 3), uint3(7, 6, 10), uint3(7, 11, 6), uint3(11, 0, 6),
        uint3(0, 1, 6), uint3(6, 1, 10), uint3(9, 0, 11), uint3(9, 11, 2), uint3(9, 2, 5),  uint3(7, 2, 11),
    };

#define ICOSAHEDRON_TRISTRIP_INDEX_COUNT 34
#define ICOSAHEDRON_TRISTRIP_SEGMENT_COUNT 7
#define ICOSAHEDRON_TRISTRIP_COUNT (ICOSAHEDRON_TRISTRIP_INDEX_COUNT + ICOSAHEDRON_TRISTRIP_SEGMENT_COUNT)
#define ICOSAHEDRON_TRISTRIP_RESTART uint(-1)
    public static const uint[ICOSAHEDRON_TRISTRIP_COUNT] kTriStrips = {
        0,
        4,
        1,
        8,
        10,
        3,
        7,
        2,
        11,
        9,
        0,
        4,
        ICOSAHEDRON_TRISTRIP_RESTART, //
        11,
        0,
        6,
        1,
        ICOSAHEDRON_TRISTRIP_RESTART, //
        10,
        7,
        6,
        11,
        ICOSAHEDRON_TRISTRIP_RESTART, //
        6,
        1,
        10,
        ICOSAHEDRON_TRISTRIP_RESTART, //
        2,
        5,
        9,
        4,
        ICOSAHEDRON_TRISTRIP_RESTART, //
        8,
        5,
        3,
        2,
        ICOSAHEDRON_TRISTRIP_RESTART, //
        4,
        5,
        8,
        ICOSAHEDRON_TRISTRIP_RESTART, //
    };
}
